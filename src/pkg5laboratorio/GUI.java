/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg5laboratorio;

import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author JOSE-PC
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();

    }
    MatrizClass matriz = new MatrizClass();
    int m, n, p, q;
    int[][] matrizA, matrizB, matrizR;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rellerarA = new javax.swing.JButton();
        rellerarB = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        preferenciasA = new javax.swing.JComboBox<>();
        preferenciasB = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaB = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablaA = new javax.swing.JTable();
        sumaBoton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        columnasA = new javax.swing.JTextField();
        filasA = new javax.swing.JTextField();
        columnasB = new javax.swing.JTextField();
        filasB = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaR = new javax.swing.JTable();
        restaBoton = new javax.swing.JButton();
        producPuntoBoton = new javax.swing.JButton();
        cuboBoton = new javax.swing.JButton();
        transpuestaBoton = new javax.swing.JButton();
        producCruzBoton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        matrizEnCuestion = new javax.swing.JComboBox<>();
        borrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calculadora de Matrices");

        rellerarA.setText("Rellenar A");
        rellerarA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rellerarAMouseClicked(evt);
            }
        });

        rellerarB.setText("Rellenar B");
        rellerarB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rellerarBMouseClicked(evt);
            }
        });

        jLabel1.setText("Cómo desea rellenar A?");

        preferenciasA.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Aleatorio", "Manual" }));

        preferenciasB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Aleatorio", "Manual" }));

        jLabel2.setText("Cómo desea rellenar B?");

        tablaB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "B"
            }
        ));
        tablaB.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane4.setViewportView(tablaB);

        tablaA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "A"
            }
        ));
        tablaA.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane5.setViewportView(tablaA);

        sumaBoton.setText("A + B");
        sumaBoton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sumaBotonMouseClicked(evt);
            }
        });

        jLabel3.setText("Número de Filas:");

        jLabel4.setText("Número de Columnas:");

        columnasA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                columnasAKeyTyped(evt);
            }
        });

        filasA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                filasAKeyTyped(evt);
            }
        });

        columnasB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                columnasBKeyTyped(evt);
            }
        });

        filasB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                filasBKeyTyped(evt);
            }
        });

        jLabel5.setText("Número de Filas:");

        jLabel6.setText("Número de Columnas:");

        tablaR.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "R"
            }
        ));
        tablaR.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(tablaR);

        restaBoton.setText("A - B");
        restaBoton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                restaBotonMouseClicked(evt);
            }
        });

        producPuntoBoton.setText("A · B");
        producPuntoBoton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                producPuntoBotonMouseClicked(evt);
            }
        });

        cuboBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg5laboratorio/M^3.png"))); // NOI18N
        cuboBoton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cuboBotonMouseClicked(evt);
            }
        });

        transpuestaBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg5laboratorio/M^T.png"))); // NOI18N
        transpuestaBoton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                transpuestaBotonMouseClicked(evt);
            }
        });

        producCruzBoton.setText("A x B");
        producCruzBoton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                producCruzBotonMouseClicked(evt);
            }
        });

        jLabel7.setText("Matriz a transponer/elevar al cubo: ");

        matrizEnCuestion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A", "B" }));

        borrar.setText("Borrar Todo");
        borrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                borrarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel3))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(filasA, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(columnasA, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rellerarA, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(preferenciasA, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 30, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel5))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(filasB, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(columnasB, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(rellerarB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(preferenciasB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(borrar)))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sumaBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(restaBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(producCruzBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(producPuntoBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cuboBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(matrizEnCuestion, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(transpuestaBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(filasA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(columnasA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(preferenciasB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sumaBoton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rellerarB))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(filasB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(producPuntoBoton)
                                .addComponent(cuboBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(columnasB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(producCruzBoton)
                                .addComponent(transpuestaBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(restaBoton))
                            .addComponent(jLabel6)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(preferenciasA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rellerarA)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(matrizEnCuestion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(borrar))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rellerarAMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rellerarAMouseClicked
        tablaA.setModel(new DefaultTableModel(null, new String[]{"A"}));

        m = Integer.parseInt(filasA.getText());
        n = Integer.parseInt(columnasA.getText());
        matrizA = new int[m][n];
        DefaultTableModel model = (DefaultTableModel) tablaA.getModel();
        model.setRowCount(m);
        for (int i = 1; i <= n; i++) {
            model.addColumn(i);
        }
        for (int i = 0; i < m; i++) {
            model.setValueAt((i + 1), i, 0);
        }
        if (preferenciasA.getSelectedItem().equals("Aleatorio")) {
            matrizA = matriz.llenarAleatorio(matrizA, m, n);
            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    model.setValueAt(matrizA[i][j], i, (j + 1));
                }
            }
        } else {
            String cadena = "";
            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    int numero = 0;
                    while (true) {
                        cadena = JOptionPane.showInputDialog("Digite el elemento en la fila: " + (i + 1) + " Columna: " + (j + 1));
                        try {
                            numero = Integer.parseInt(cadena);
                            matrizA[i][j] = numero;
                            model.setValueAt(numero, i, (j + 1));
                            break;
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "Ingrese un número entero.");
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_rellerarAMouseClicked

    private void rellerarBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rellerarBMouseClicked
        tablaB.setModel(new DefaultTableModel(null, new String[]{"B"}));
        p = Integer.parseInt(filasB.getText());
        q = Integer.parseInt(columnasB.getText());
        matrizB = new int[p][q];
        DefaultTableModel model = (DefaultTableModel) tablaB.getModel();
        model.setRowCount(p);
        for (int i = 1; i <= q; i++) {
            model.addColumn(i);
        }
        for (int i = 0; i < p; i++) {
            model.setValueAt((i + 1), i, 0);
        }
        if (preferenciasB.getSelectedItem().equals("Aleatorio")) {
            matrizB = matriz.llenarAleatorio(matrizB, p, q);
            for (int i = 0; i < p; i++) {
                for (int j = 0; j < q; j++) {
                    model.setValueAt(matrizB[i][j], i, (j + 1));
                }
            }
        } else {
            String cadena = "";
            for (int i = 0; i < p; i++) {
                for (int j = 0; j < q; j++) {
                    int numero = 0;
                    while (true) {
                        cadena = JOptionPane.showInputDialog("Digite el elemento en la fila: " + (i + 1) + " Columna: " + (j + 1));
                        try {
                            numero = Integer.parseInt(cadena);
                            matrizB[i][j] = numero;
                            model.setValueAt(numero, i, (j + 1));
                            break;
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "Ingrese un número entero.");
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_rellerarBMouseClicked

    private void sumaBotonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sumaBotonMouseClicked
        tablaR.setModel(new DefaultTableModel(null, new String[]{"R"}));
        if (m == p && n == q) {
            matrizR = matriz.sumarMatrices(matrizA, m, n, matrizB, p, q);
            DefaultTableModel model = (DefaultTableModel) tablaR.getModel();
            model.setRowCount(m);
            for (int i = 1; i <= n; i++) {
                model.addColumn(i);
            }
            for (int i = 0; i < p; i++) {
                model.setValueAt((i + 1), i, 0);
            }
            for (int i = 0; i < p; i++) {
                for (int j = 0; j < q; j++) {
                    model.setValueAt(matrizR[i][j], i, (j + 1));
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Las matrices deben tener igual tamaño para poder sumarlas.", "Tamaños diferentes.", 1);
        }
    }//GEN-LAST:event_sumaBotonMouseClicked

    private void restaBotonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_restaBotonMouseClicked
        tablaR.setModel(new DefaultTableModel(null, new String[]{"R"}));
        if (m == p && n == q) {
            matrizR = matriz.restarMatrices(matrizA, m, n, matrizB, p, q);
            DefaultTableModel model = (DefaultTableModel) tablaR.getModel();
            model.setRowCount(m);
            for (int i = 1; i <= n; i++) {
                model.addColumn(i);
            }
            for (int i = 0; i < p; i++) {
                model.setValueAt((i + 1), i, 0);
            }
            for (int i = 0; i < p; i++) {
                for (int j = 0; j < q; j++) {
                    model.setValueAt(matrizR[i][j], i, (j + 1));
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Las matrices deben tener igual tamaño para poder restarlas.", "Tamaños diferentes.", 1);
        }
    }//GEN-LAST:event_restaBotonMouseClicked

    private void producPuntoBotonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_producPuntoBotonMouseClicked
        tablaR.setModel(new DefaultTableModel(null, new String[]{"R"}));
        if (m == p && n == q) {
            matrizR = matriz.producPuntoMatrices(matrizA, m, n, matrizB, p, q);
            DefaultTableModel model = (DefaultTableModel) tablaR.getModel();
            model.setRowCount(m);
            for (int i = 1; i <= n; i++) {
                model.addColumn(i);
            }
            for (int i = 0; i < p; i++) {
                model.setValueAt((i + 1), i, 0);
            }
            for (int i = 0; i < p; i++) {
                for (int j = 0; j < q; j++) {
                    model.setValueAt(matrizR[i][j], i, (j + 1));
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Las matrices deben tener igual tamaño para poder aplicar el producto punto.", "Tamaños diferentes.", 1);
        }
    }//GEN-LAST:event_producPuntoBotonMouseClicked

    private void cuboBotonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cuboBotonMouseClicked
        tablaR.setModel(new DefaultTableModel(null, new String[]{"R"}));
        if(matrizEnCuestion.getSelectedItem().equals("A")){
            matrizR=matriz.matrizAlCubo(matrizA, m, n);
            DefaultTableModel model = (DefaultTableModel) tablaR.getModel();
            model.setRowCount(m);
            for (int i = 1; i <= n; i++) {
                model.addColumn(i);
            }
            for (int i = 0; i < m; i++) {
                model.setValueAt((i + 1), i, 0);
            }
            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    model.setValueAt(matrizR[i][j], i, (j + 1));
                }
            }
        }
        if(matrizEnCuestion.getSelectedItem().equals("B")){
            matrizR=matriz.matrizAlCubo(matrizB, p, q);
            DefaultTableModel model = (DefaultTableModel) tablaR.getModel();
            model.setRowCount(p);
            for (int i = 1; i <= q; i++) {
                model.addColumn(i);
            }
            for (int i = 0; i < p; i++) {
                model.setValueAt((i + 1), i, 0);
            }
            for (int i = 0; i < p; i++) {
                for (int j = 0; j < q; j++) {
                    model.setValueAt(matrizR[i][j], i, (j + 1));
                }
            }
        }
    }//GEN-LAST:event_cuboBotonMouseClicked

    private void transpuestaBotonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_transpuestaBotonMouseClicked
        tablaR.setModel(new DefaultTableModel(null, new String[]{"R"}));
        if(matrizEnCuestion.getSelectedItem().equals("A")){
            matrizR=matriz.transponerMatriz(matrizA, m, n);
            DefaultTableModel model = (DefaultTableModel) tablaR.getModel();
            model.setRowCount(n);
            for (int i = 1; i <= m; i++) {
                model.addColumn(i);
            }
            for (int i = 0; i < n; i++) {
                model.setValueAt((i + 1), i, 0);
            }
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    model.setValueAt(matrizR[i][j], i, (j + 1));
                }
            }
        }
        if(matrizEnCuestion.getSelectedItem().equals("B")){
            matrizR=matriz.transponerMatriz(matrizB, p, q);
            DefaultTableModel model = (DefaultTableModel) tablaR.getModel();
            model.setRowCount(q);
            for (int i = 1; i <= p; i++) {
                model.addColumn(i);
            }
            for (int i = 0; i < q; i++) {
                model.setValueAt((i + 1), i, 0);
            }
            for (int i = 0; i < q; i++) {
                for (int j = 0; j < p; j++) {
                    model.setValueAt(matrizR[i][j], i, (j + 1));
                }
            }
        }
    }//GEN-LAST:event_transpuestaBotonMouseClicked

    private void producCruzBotonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_producCruzBotonMouseClicked
        tablaR.setModel(new DefaultTableModel(null, new String[]{"R"}));
        if (n == p) {
            matrizR = matriz.producCruzMatrices(matrizA, m, n, matrizB, p, q);
            DefaultTableModel model = (DefaultTableModel) tablaR.getModel();
            model.setRowCount(m);
            for (int i = 1; i <= q; i++) {
                model.addColumn(i);
            }
            for (int i = 0; i < m; i++) {
                model.setValueAt((i + 1), i, 0);
            }
            for (int i = 0; i < m; i++) {
                for (int j = 0; j < q; j++) {
                    model.setValueAt(matrizR[i][j], i, (j + 1));
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "El número de columnas de A debe ser igual al número de filas de B para poder aplicar el producto cruz.", "Tamaños diferentes.", 1);
        }
    }//GEN-LAST:event_producCruzBotonMouseClicked

    private void filasAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filasAKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE)) {
            evt.consume();
        }
    }//GEN-LAST:event_filasAKeyTyped

    private void columnasAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_columnasAKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE)) {
            evt.consume();
        }
    }//GEN-LAST:event_columnasAKeyTyped

    private void filasBKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filasBKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE)) {
            evt.consume();
        }
    }//GEN-LAST:event_filasBKeyTyped

    private void columnasBKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_columnasBKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE)) {
            evt.consume();
        }
    }//GEN-LAST:event_columnasBKeyTyped

    private void borrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_borrarMouseClicked
        matrizA=matriz.inicializarMatriz(matrizA, m, n);
        matrizB=matriz.inicializarMatriz(matrizB, p, q);
        matrizR=matriz.inicializarMatriz(matrizR, (tablaR.getRowCount()-1), (tablaR.getColumnCount()-1));
        
        tablaA.setModel(new DefaultTableModel(null, new String[]{"A"}));
        tablaB.setModel(new DefaultTableModel(null, new String[]{"B"}));
        tablaR.setModel(new DefaultTableModel(null, new String[]{"R"}));
        filasA.setText("");
        columnasA.setText("");
        filasB.setText("");
        columnasB.setText("");
    }//GEN-LAST:event_borrarMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton borrar;
    private javax.swing.JTextField columnasA;
    private javax.swing.JTextField columnasB;
    private javax.swing.JButton cuboBoton;
    private javax.swing.JTextField filasA;
    private javax.swing.JTextField filasB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JComboBox<String> matrizEnCuestion;
    private javax.swing.JComboBox<String> preferenciasA;
    private javax.swing.JComboBox<String> preferenciasB;
    private javax.swing.JButton producCruzBoton;
    private javax.swing.JButton producPuntoBoton;
    private javax.swing.JButton rellerarA;
    private javax.swing.JButton rellerarB;
    private javax.swing.JButton restaBoton;
    private javax.swing.JButton sumaBoton;
    private javax.swing.JTable tablaA;
    private javax.swing.JTable tablaB;
    private javax.swing.JTable tablaR;
    private javax.swing.JButton transpuestaBoton;
    // End of variables declaration//GEN-END:variables
}
